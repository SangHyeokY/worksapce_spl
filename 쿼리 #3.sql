SELECT MESSAGE_CONTENT
      , SEAT_NUM
      , MESSAGE.MEMBER_CODE
      , MEMBER_NAME
      , MESSAGE_DATE
FROM STUDYROOM_MESSAGE MESSAGE INNER JOIN STUDYROOM_MEMBER MEMBER
ON MESSAGE.MEMBER_CODE = MEMBER.MEMBER_CODE;

-- 이런식으로
-- 장바구니와 관련된 모든 정보를 조회할 수 있는 cart_view 생성
CREATE OR REPLACE VIEW CART_VIEW
AS
SELECT CART_CODE
	, CART.ITEM_CODE
	, CART.MEMBER_ID
	, CART_CNT
	, CART_DATE
	
	, ITEM_NAME
	, ITEM_PRICE
	, ITEM_INTRO
	, ITEM_PRICE * CART_CNT TOTAL_PRICE
	
	, MEMBER_NAME
	, MEMBER_TEL
   , CONCAT(POST_CODE, ' ',MEMBER_ADDR, ' ',ADDR_DETAIL) ADDRESS
   
   , ATTACHED_FILE_NAME
   , ORIGIN_FILE_NAME
   , IS_MAIN
   , IMG_CODE
   
   , ITEM.CATE_CODE
   , CATE_NAME
FROM shop_cart CART
INNER JOIN shop_item ITEM
ON CART.ITEM_CODE = ITEM.ITEM_CODE
INNER JOIN shop_member MEMBER
ON MEMBER.MEMBER_ID = CART.MEMBER_ID
INNER JOIN item_image IMG
ON IMG.ITEM_CODE = ITEM.ITEM_CODE
INNER JOIN item_category CATE
ON CATE.CATE_CODE = ITEM.CATE_CODE
WHERE IS_MAIN = 'Y';


SELECT MEMBER_NAME
		, MEMBER_ID
		, MEMBER_GENDER
		, MEMBER_TEL
		, MEMBER_ADDR
		, MEMBER_DETAIL
		, IS_ADMIN
FROM studyroom_member;

SELECT  MEMBER_NAME
		, MEMBER_ID
		, MEMBER_CODE
FROM studyroom_member;


SELECT MESSAGE_CONTENT
            , MESSAGE.MEMBER_CODE
            , MESSAGE_DATE
        FROM STUDYROOM_MESSAGE MESSAGE INNER JOIN STUDYROOM_MEMBER MEMBER
        ON MESSAGE.MEMBER_CODE = MEMBER.MEMBER_CODE;
        
 SELECT MESSAGE_CONTENT
            , SEAT_NUM
            , MESSAGE.MEMBER_CODE
            , MEMBER_NAME
            , IS_ADMIN
            , MESSAGE_DATE
        FROM STUDYROOM_MESSAGE MESSAGE INNER JOIN STUDYROOM_MEMBER MEMBER
        ON MESSAGE.MEMBER_CODE = MEMBER.MEMBER_CODE;
        
        
SELECT * FROM SECURITY_MEMBER;

-- USER, MANAGER, ADMIN
CREATE TABLE SECURITY_MEMBER (
	MEMBER_ID VARCHAR(50) PRIMARY KEY
	, MEMBER_NAME VARCHAR(50) NOT NULL
	, MEMBER_PW VARCHAR(100) NOT NULL
	, MEMBER_ROLL VARCHAR(50) DEFAULT 'USER'
);

UPDATE security_member
SET MEMBER_ROLL = 'MANAGER'
WHERE MEMBER_ID = 'MANAGER';
COMMIT;


SELECT SEAT_NUM
                ,SEAT_POWER
                , SEAT_FLOOR
                , AGE_CODE
                , SEAT.MEMBER_CODE
        FROM STUDYROOM_SEAT SEAT
        INNER JOIN STUDYROOM_MEMBER MEMBER;
        
        SELECT MESSAGE_CONTENT
            , SEAT_NUM
            , MESSAGE.MEMBER_CODE
            , MEMBER_NAME
            , MEMBER_ID
            , IS_ADMIN
            , MESSAGE_DATE
        FROM STUDYROOM_MESSAGE MESSAGE INNER JOIN STUDYROOM_MEMBER MEMBER;
        
        
  SELECT SEAT_NUM
            , MEMBER_CODE
        FROM studyroom_seat;
        
        SELECT MEMBER_NAME
            , MEMBER_ID
            , MEMBER.MEMBER_CODE
            , SEAT_NUM
        FROM STUDYROOM_MEMBER MEMBER
        INNER JOIN STUDYROOM_SEAT SEAT
        ON MEMBER.MEMBER_CODE = SEAT.MEMBER_CODE;
        
        
        
SELECT MEMBER_NAME
            , MEMBER_ID
            , MEMBER_CODE
        FROM STUDYROOM_MEMBER
        WHERE IS_ADMIN = 'USER'
        ORDER BY MEMBER_CODE DESC;
        
        
        
        
CREATE TABLE APPROVAL(
	APPROVAL_CODE INT AUTO_INCREMENT PRIMARY KEY
	, MEMBER_CODE INT REFERENCES STUDYROOM_MEMBER (MEMBER_CODE)
	, CHARGE_CODE INT REFERENCES studyroom_charge (CHARGE_CODE)
	, CARD VARCHAR(5) DEFAULT 'Y'   -- 'Y', 'N'
);

ALTER TABLE approval ADD COLUMN APPROVAL_DATE DATETIME DEFAULT CURRENT_TIMESTAMP AFTER APPROVAL_CODE;



SELECT APPROVAL_DATE
		, MEMBER_NAME
		, CHARGE_NAME
		, CHARGE_FEE
FROM approval APP
INNER JOIN studyroom_charge CHARGE
ON APP.CHARGE_CODE = CHARGE.CHARGE_CODE
INNER JOIN studyroom_member MEMBER
ON APP.MEMBER_CODE = MEMBER.MEMBER_CODE
ORDER BY APPROVAL_DATE DESC;

-- 입실퇴실 기록 가져오기
SELECT IN_OUT
		, MEMBER_NAME
		, DAY.MEMBER_CODE
FROM studyroom_inout DAY
INNER JOIN studyroom_member MEMBER
ON DAY.MEMBER_CODE = MEMBER.MEMBER_CODE;


CREATE TABLE STUDYROOM_RESERVATION(
	RESERVATION_CODE INT AUTO_INCREMENT PRIMARY KEY
	, MEMBER_CODE INT REFERENCES STUDYROOM_MEMBER (MEMBER_CODE)
	, SEAT_NUM INT REFERENCES STUDYROOM_SEAT (SEAT_NUM)
	, RESERVATION_DATE DATETIME DEFAULT CURRENT_TIMESTAMP
	, CHARGE_CODE INT REFERENCES studyroom_charge (CHARGE_CODE)
);

SELECT RESERVATION_CODE
		, RESERVATION_DATE
		, MEMBER_NAME
		, SEAT_NUM
		, CHARGE_NAME
FROM studyroom_reservation RES
INNER JOIN studyroom_member MEMBER
ON RES.MEMBER_CODE = MEMBER.MEMBER_CODE
INNER JOIN studyroom_charge CHARGE
ON RES.CHARGE_CODE = CHARGE.CHARGE_CODE
ORDER BY RESERVATION_DATE DESC;

CREATE TABLE STUDYROOM_INOUT(
	DAY_INPUT INT AUTO_INCREMENT PRIMARY KEY
	, MEMBER_CODE INT REFERENCES STUDYROOM_MEMBER (MEMBER_CODE)
	, IN_OUT VARCHAR(5)
);


SELECT DAY_INPUT
		, MEMBER_NAME
		, IN_OUT
FROM studyroom_inout INNT
INNER JOIN studyroom_member MEMBER
ON INNT.MEMBER_CODE = MEMBER.MEMBER_CODE;

 SELECT
        (SELECT DATE_ADD(
        (SELECT DATE_FORMAT(APPROVAL_DATE, '%Y-%m-%d') FROM approval 
        , INTERVAL (
        SELECT
        CHARGE_DATE
        FROM STUDYROOM_CHARGE CHARGE
        INNER JOIN APPROVAL APP
        ON APP.CHARGE_CODE = CHARGE.CHARGE_CODE
        WHERE APPROVAL_CODE = (SELECT APPROVAL_CODE FROM APPROVAL 
        ) DAY)
        ) AS END_DATE
        FROM approval;
        
        
        
        
        
-- 좌석 상태
CREATE TABLE SEAT_STATUS (
	STATUS_NUM INT AUTO_INCREMENT PRIMARY KEY
	, STATUS_NAME VARCHAR(20) NOT NULL UNIQUE
);
INSERT INTO SEAT_STATUS VALUES(1, '사용중');
INSERT INTO SEAT_STATUS VALUES(2, '사용가능');
INSERT INTO SEAT_STATUS VALUES(3, '수리중');

-- 좌석정보
CREATE TABLE STUDYROOM_SEAT (
-- 좌석 상태
CREATE TABLE SEAT_STATUS (
	STATUS_NUM INT AUTO_INCREMENT PRIMARY KEY
	, STATUS_NAME VARCHAR(20) NOT NULL UNIQUE
);
INSERT INTO SEAT_STATUS VALUES(1, '사용중');
INSERT INTO SEAT_STATUS VALUES(2, '사용가능');
INSERT INTO SEAT_STATUS VALUES(3, '수리중');

-- 좌석정보
CREATE TABLE STUDYROOM_SEAT (
	SEAT_NUM INT AUTO_INCREMENT PRIMARY KEY
	, SEAT_POWER VARCHAR(10) DEFAULT 'OFF' -- (ON,OFF)studyroom_seat
	, SEAT_FLOOR INT DEFAULT 1 NOT NULL -- (1 , 2)
	, MEMBER_CODE INT REFERENCES STUDYROOM_MEMBER (MEMBER_CODE)
	, STATUS_NUM INT DEFAULT 2 REFERENCES seat_status (STATUS_NUM)
	, AGE_CODE INT DEFAULT 1 REFERENCES floor_age (AGE_CODE)
);

INSERT INTO studyroom_seat VALUES (1, 'OFF', 1, null, 2, 1);

-- 층(나이별 구분) 정보
CREATE TABLE FLOOR_AGE (
	AGE_CODE INT AUTO_INCREMENT PRIMARY KEY
	, AGE_NAME VARCHAR(15) NOT NULL
); INT AUTO_INCREMENT PRIMARY KEY
	, SEAT_POWER VARCHAR(10) DEFAULT 'OFF' -- (ON,OFF)studyroom_seat
	, SEAT_FLOOR INT DEFAULT 1 NOT NULL -- (1 , 2)
	, MEMBER_CODE INT REFERENCES STUDYROOM_MEMBER (MEMBER_CODE)
	, STATUS_NUM INT DEFAULT 2 REFERENCES seat_status (STATUS_NUM)
	, AGE_CODE INT DEFAULT 1 REFERENCES floor_age (AGE_CODE)
);




INSERT INTO studyroom_seat VALUES (1, 'OFF', 1, null, 2, 1);

-- 층(나이별 구분) 정보
CREATE TABLE FLOOR_AGE (
	AGE_CODE INT AUTO_INCREMENT PRIMARY KEY
	, AGE_NAME VARCHAR(15) NOT NULL
);

SELECT SEAT_NUM
		, STATUS_NAME
		, SEAT_FLOOR
		, SEAT_POWER
		, MEMBER_NAME
FROM studyroom_seat SEAT
INNER JOIN seat_status STATUS
ON SEAT.STATUS_NUM = STATUS.STATUS_NUM
INNER JOIN studyroom_member MEMBER
ON SEAT.MEMBER_CODE = MEMBER.MEMBER_CODE;

SELECT APPROVAL_FEE
FROM approval;




SELECT DAY_INPUT
            , MEMBER_NAME
            , CASE
                WHEN IN_OUT = 'IN' THEN '입실'
                WHEN IN_OUT = 'OUT' THEN '퇴실'
                END IN_OUT
            , INOUT_TIME
        FROM studyroom_inout INOT
        INNER JOIN studyroom_member MEMBER
        ON INOT.MEMBER_CODE = MEMBER.MEMBER_CODE
        ORDER BY DAY_INPUT DESC LIMIT 100;
        
SELECT COUPON_CODE
		, COUPON_NAME
		, DISCOUNT_PERCENT
FROM coupon;


SELECT SUM(APPROVAL_FEE) FROM approval;



SELECT MEMBER_NAME
         , MEMBER_ID
         , MEMBER.MEMBER_CODE
         , SEAT_NUM
FROM studyroom_member MEMBER
INNER JOIN studyroom_seat SEAT
ON MEMBER.MEMBER_CODE = SEAT.MEMBER_CODE
WHERE IS_ADMIN = 'USER'
ORDER BY MEMBER_CODE DESC;


   SELECT MESSAGE_CONTENT
            , MESSAGE.MEMBER_CODE
            , MEMBER_NAME
            , MEMBER_ID
            , DATE_FORMAT(MESSAGE_DATE, '%Y-%m-%d ㅤ%p %l:%i') MESSAGE_DATE
            , TO_FROM
        FROM STUDYROOM_MESSAGE MESSAGE
        INNER JOIN STUDYROOM_MEMBER MEMBER
        ON MESSAGE.MEMBER_CODE = MEMBER.MEMBER_CODE
        WHERE TO_FROM = 'TO'
        ORDER BY MESSAGE_CODE DESC LIMIT 100;
        
        
SELECT COU.COUPON_CODE
		,  COU.MEMBER_CODE
		, MEMBER_NAME
		, MEMBER_ID
		, COUPON_NAME
		, DISCOUNT_PERCENT
FROM member_coupon COU
INNER JOIN STUDYROOM_MEMBER MEMBER
ON COU.MEMBER_CODE = MEMBER.MEMBER_CODE
INNER JOIN coupon PON
ON COU.COUPON_CODE = PON.COUPON_CODE;

SELECT SEAT_NUM
                , CASE
                    WHEN SEAT_POWER = 'ON' THEN '켜짐'
                    WHEN SEAT_POWER = 'OFF' THEN '꺼짐'
                    END SEAT_POWER
                , SEAT_FLOOR
                , SEAT.STATUS_NUM
                , STATUS_NAME
                , AGE_CODE
                , SEAT.MEMBER_CODE
        FROM STUDYROOM_SEAT SEAT
        INNER JOIN STUDYROOM_MEMBER MEMBER
        ON SEAT.MEMBER_CODE = MEMBER.MEMBER_CODE
        INNER JOIN seat_status STATUS
        ON SEAT.STATUS_NUM = STATUS.STATUS_NUM;
        
        
        
        
   SELECT SEAT_NUM
                , CASE
                    WHEN SEAT_POWER = 'ON' THEN '켜짐'
                    WHEN SEAT_POWER = 'OFF' THEN '꺼짐'
                    END SEAT_POWER
                , SEAT_FLOOR
                , CASE
                    WHEN SEAT.STATUS_NUM = 1 THEN '사용중'
                    WHEN SEAT.STATUS_NUM = 2 THEN '사용가능'
                    WHEN SEAT.STATUS_NUM = 3 THEN '수리중'
                    END STATUS_NUM
                , AGE_CODE
                , SEAT.MEMBER_CODE
        FROM STUDYROOM_SEAT SEAT
        INNER JOIN STUDYROOM_MEMBER MEMBER
        ON SEAT.MEMBER_CODE = MEMBER.MEMBER_CODE
        INNER JOIN seat_status STATUS
      
        ON SEAT.STATUS_NUM = STATUS.STATUS_NUM;
        
        
        
SELECT SEAT_NUM
            , CASE
                WHEN SEAT_POWER = 'ON' THEN '켜짐'
                WHEN SEAT_POWER = 'OFF' THEN '꺼짐'
                END SEAT_POWER
            , SEAT_FLOOR
            , SEAT.STATUS_NUM
            , AGE_CODE
            , SEAT.MEMBER_CODE
        FROM STUDYROOM_SEAT SEAT
        INNER JOIN STUDYROOM_MEMBER MEMBER
        ON SEAT.MEMBER_CODE = MEMBER.MEMBER_CODE
        INNER JOIN seat_status STATUS
        ON SEAT.STATUS_NUM = STATUS.STATUS_NUM;
        
        
CREATE TABLE PYTHON_BOARD (
	BOARD_NUM INT PRIMARY KEY
	, TITLE VARCHAR(50)
	, WRITER VARCHAR(50)
	, READ_CNT INT
);

SELECT * FROM PYTHON_BOARD;