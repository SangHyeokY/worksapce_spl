SELECT MESSAGE_CONTENT
      , SEAT_NUM
      , MESSAGE.MEMBER_CODE
      , MEMBER_NAME
      , MESSAGE_DATE
FROM STUDYROOM_MESSAGE MESSAGE INNER JOIN STUDYROOM_MEMBER MEMBER
ON MESSAGE.MEMBER_CODE = MEMBER.MEMBER_CODE;

-- 이런식으로
-- 장바구니와 관련된 모든 정보를 조회할 수 있는 cart_view 생성
CREATE OR REPLACE VIEW CART_VIEW
AS
SELECT CART_CODE
	, CART.ITEM_CODE
	, CART.MEMBER_ID
	, CART_CNT
	, CART_DATE
	
	, ITEM_NAME
	, ITEM_PRICE
	, ITEM_INTRO
	, ITEM_PRICE * CART_CNT TOTAL_PRICE
	
	, MEMBER_NAME
	, MEMBER_TEL
   , CONCAT(POST_CODE, ' ',MEMBER_ADDR, ' ',ADDR_DETAIL) ADDRESS
   
   , ATTACHED_FILE_NAME
   , ORIGIN_FILE_NAME
   , IS_MAIN
   , IMG_CODE
   
   , ITEM.CATE_CODE
   , CATE_NAME
FROM shop_cart CART
INNER JOIN shop_item ITEM
ON CART.ITEM_CODE = ITEM.ITEM_CODE
INNER JOIN shop_member MEMBER
ON MEMBER.MEMBER_ID = CART.MEMBER_ID
INNER JOIN item_image IMG
ON IMG.ITEM_CODE = ITEM.ITEM_CODE
INNER JOIN item_category CATE
ON CATE.CATE_CODE = ITEM.CATE_CODE
WHERE IS_MAIN = 'Y';


SELECT MEMBER_NAME
		, MEMBER_ID
		, MEMBER_GENDER
		, MEMBER_TEL
		, MEMBER_ADDR
		, MEMBER_DETAIL
		, IS_ADMIN
FROM studyroom_member;

SELECT  MEMBER_NAME
		, MEMBER_ID
		, MEMBER_CODE
FROM studyroom_member;


SELECT MESSAGE_CONTENT
            , MESSAGE.MEMBER_CODE
            , MESSAGE_DATE
        FROM STUDYROOM_MESSAGE MESSAGE INNER JOIN STUDYROOM_MEMBER MEMBER
        ON MESSAGE.MEMBER_CODE = MEMBER.MEMBER_CODE;
        
 SELECT MESSAGE_CONTENT
            , SEAT_NUM
            , MESSAGE.MEMBER_CODE
            , MEMBER_NAME
            , IS_ADMIN
            , MESSAGE_DATE
        FROM STUDYROOM_MESSAGE MESSAGE INNER JOIN STUDYROOM_MEMBER MEMBER
        ON MESSAGE.MEMBER_CODE = MEMBER.MEMBER_CODE;
        
        
SELECT * FROM SECURITY_MEMBER;

-- USER, MANAGER, ADMIN
CREATE TABLE SECURITY_MEMBER (
	MEMBER_ID VARCHAR(50) PRIMARY KEY
	, MEMBER_NAME VARCHAR(50) NOT NULL
	, MEMBER_PW VARCHAR(100) NOT NULL
	, MEMBER_ROLL VARCHAR(50) DEFAULT 'USER'
);

UPDATE security_member
SET MEMBER_ROLL = 'MANAGER'
WHERE MEMBER_ID = 'MANAGER';
COMMIT;


SELECT SEAT_NUM
                ,SEAT_POWER
                , SEAT_FLOOR
                , AGE_CODE
                , SEAT.MEMBER_CODE
        FROM STUDYROOM_SEAT SEAT
        INNER JOIN STUDYROOM_MEMBER MEMBER;
        
        SELECT MESSAGE_CONTENT
            , SEAT_NUM
            , MESSAGE.MEMBER_CODE
            , MEMBER_NAME
            , MEMBER_ID
            , IS_ADMIN
            , MESSAGE_DATE
        FROM STUDYROOM_MESSAGE MESSAGE INNER JOIN STUDYROOM_MEMBER MEMBER;
        
        
  SELECT SEAT_NUM
            , MEMBER_CODE
        FROM studyroom_seat;
        
        SELECT MEMBER_NAME
            , MEMBER_ID
            , MEMBER.MEMBER_CODE
            , SEAT_NUM
        FROM STUDYROOM_MEMBER MEMBER
        INNER JOIN STUDYROOM_SEAT SEAT
        ON MEMBER.MEMBER_CODE = SEAT.MEMBER_CODE;
        
        
        
SELECT MEMBER_NAME
            , MEMBER_ID
            , MEMBER_CODE
        FROM STUDYROOM_MEMBER
        WHERE IS_ADMIN = 'USER'
        ORDER BY MEMBER_CODE DESC;
        
        
        
        
CREATE TABLE APPROVAL(
	APPROVAL_CODE INT AUTO_INCREMENT PRIMARY KEY
	, MEMBER_CODE INT REFERENCES STUDYROOM_MEMBER (MEMBER_CODE)
	, CHARGE_CODE INT REFERENCES studyroom_charge (CHARGE_CODE)
	, CARD VARCHAR(5) DEFAULT 'Y'   -- 'Y', 'N'
);

ALTER TABLE approval ADD COLUMN APPROVAL_DATE DATETIME DEFAULT CURRENT_TIMESTAMP AFTER APPROVAL_CODE;



SELECT APPROVAL_DATE
		, MEMBER_NAME
		, CHARGE_NAME
		, CHARGE_FEE
FROM approval APP
INNER JOIN studyroom_charge CHARGE
ON APP.CHARGE_CODE = CHARGE.CHARGE_CODE
INNER JOIN studyroom_member MEMBER
ON APP.MEMBER_CODE = MEMBER.MEMBER_CODE
ORDER BY APPROVAL_DATE DESC;

-- 입실퇴실 기록 가져오기
SELECT IN_OUT
		, MEMBER_NAME
		, DAY.MEMBER_CODE
FROM studyroom_inout DAY
INNER JOIN studyroom_member MEMBER
ON DAY.MEMBER_CODE = MEMBER.MEMBER_CODE;


CREATE TABLE STUDYROOM_RESERVATION(
	RESERVATION_CODE INT AUTO_INCREMENT PRIMARY KEY
	, MEMBER_CODE INT REFERENCES STUDYROOM_MEMBER (MEMBER_CODE)
	, SEAT_NUM INT REFERENCES STUDYROOM_SEAT (SEAT_NUM)
	, RESERVATION_DATE DATETIME DEFAULT CURRENT_TIMESTAMP
	, CHARGE_CODE INT REFERENCES studyroom_charge (CHARGE_CODE)
);

SELECT RESERVATION_CODE
		, RESERVATION_DATE
		, MEMBER_NAME
		, SEAT_NUM
		, CHARGE_NAME
FROM studyroom_reservation RES
INNER JOIN studyroom_member MEMBER
ON RES.MEMBER_CODE = MEMBER.MEMBER_CODE
INNER JOIN studyroom_charge CHARGE
ON RES.CHARGE_CODE = CHARGE.CHARGE_CODE
ORDER BY RESERVATION_DATE DESC;

CREATE TABLE STUDYROOM_INOUT(
	DAY_INPUT INT AUTO_INCREMENT PRIMARY KEY
	, MEMBER_CODE INT REFERENCES STUDYROOM_MEMBER (MEMBER_CODE)
	, IN_OUT VARCHAR(5)
);


SELECT DAY_INPUT
		, MEMBER_NAME
		, IN_OUT
FROM studyroom_inout INNT
INNER JOIN studyroom_member MEMBER
ON INNT.MEMBER_CODE = MEMBER.MEMBER_CODE;

 SELECT
        (SELECT DATE_ADD(
        (SELECT DATE_FORMAT(APPROVAL_DATE, '%Y-%m-%d') FROM approval 
        , INTERVAL (
        SELECT
        CHARGE_DATE
        FROM STUDYROOM_CHARGE CHARGE
        INNER JOIN APPROVAL APP
        ON APP.CHARGE_CODE = CHARGE.CHARGE_CODE
        WHERE APPROVAL_CODE = (SELECT APPROVAL_CODE FROM APPROVAL 
        ) DAY)
        ) AS END_DATE
        FROM approval;
        
        
        
        
        
-- 좌석 상태
CREATE TABLE SEAT_STATUS (
	STATUS_NUM INT AUTO_INCREMENT PRIMARY KEY
	, STATUS_NAME VARCHAR(20) NOT NULL UNIQUE
);
INSERT INTO SEAT_STATUS VALUES(1, '사용중');
INSERT INTO SEAT_STATUS VALUES(2, '사용가능');
INSERT INTO SEAT_STATUS VALUES(3, '수리중');

-- 좌석정보
CREATE TABLE STUDYROOM_SEAT (
-- 좌석 상태
CREATE TABLE SEAT_STATUS (
	STATUS_NUM INT AUTO_INCREMENT PRIMARY KEY
	, STATUS_NAME VARCHAR(20) NOT NULL UNIQUE
);
INSERT INTO SEAT_STATUS VALUES(1, '사용중');
INSERT INTO SEAT_STATUS VALUES(2, '사용가능');
INSERT INTO SEAT_STATUS VALUES(3, '수리중');

-- 좌석정보
CREATE TABLE STUDYROOM_SEAT (
	SEAT_NUM INT AUTO_INCREMENT PRIMARY KEY
	, SEAT_POWER VARCHAR(10) DEFAULT 'OFF' -- (ON,OFF)studyroom_seat
	, SEAT_FLOOR INT DEFAULT 1 NOT NULL -- (1 , 2)
	, MEMBER_CODE INT REFERENCES STUDYROOM_MEMBER (MEMBER_CODE)
	, STATUS_NUM INT DEFAULT 2 REFERENCES seat_status (STATUS_NUM)
	, AGE_CODE INT DEFAULT 1 REFERENCES floor_age (AGE_CODE)
);

INSERT INTO studyroom_seat VALUES (1, 'OFF', 1, null, 2, 1);

-- 층(나이별 구분) 정보
CREATE TABLE FLOOR_AGE (
	AGE_CODE INT AUTO_INCREMENT PRIMARY KEY
	, AGE_NAME VARCHAR(15) NOT NULL
); INT AUTO_INCREMENT PRIMARY KEY
	, SEAT_POWER VARCHAR(10) DEFAULT 'OFF' -- (ON,OFF)studyroom_seat
	, SEAT_FLOOR INT DEFAULT 1 NOT NULL -- (1 , 2)
	, MEMBER_CODE INT REFERENCES STUDYROOM_MEMBER (MEMBER_CODE)
	, STATUS_NUM INT DEFAULT 2 REFERENCES seat_status (STATUS_NUM)
	, AGE_CODE INT DEFAULT 1 REFERENCES floor_age (AGE_CODE)
);




INSERT INTO studyroom_seat VALUES (1, 'OFF', 1, null, 2, 1);

-- 층(나이별 구분) 정보
CREATE TABLE FLOOR_AGE (
	AGE_CODE INT AUTO_INCREMENT PRIMARY KEY
	, AGE_NAME VARCHAR(15) NOT NULL
);

SELECT SEAT_NUM
		, STATUS_NAME
		, SEAT_FLOOR
		, SEAT_POWER
		, MEMBER_NAME
FROM studyroom_seat SEAT
INNER JOIN seat_status STATUS
ON SEAT.STATUS_NUM = STATUS.STATUS_NUM
INNER JOIN studyroom_member MEMBER
ON SEAT.MEMBER_CODE = MEMBER.MEMBER_CODE;

SELECT APPROVAL_FEE
FROM approval;




SELECT DAY_INPUT
            , MEMBER_NAME
            , CASE
                WHEN IN_OUT = 'IN' THEN '입실'
                WHEN IN_OUT = 'OUT' THEN '퇴실'
                END IN_OUT
            , INOUT_TIME
        FROM studyroom_inout INOT
        INNER JOIN studyroom_member MEMBER
        ON INOT.MEMBER_CODE = MEMBER.MEMBER_CODE
        ORDER BY DAY_INPUT DESC LIMIT 100;
        
SELECT COUPON_CODE
		, COUPON_NAME
		, DISCOUNT_PERCENT
FROM coupon;


SELECT SUM(APPROVAL_FEE) FROM approval;



SELECT MEMBER_NAME
         , MEMBER_ID
         , MEMBER.MEMBER_CODE
         , SEAT_NUM
FROM studyroom_member MEMBER
INNER JOIN studyroom_seat SEAT
ON MEMBER.MEMBER_CODE = SEAT.MEMBER_CODE
WHERE IS_ADMIN = 'USER'
ORDER BY MEMBER_CODE DESC;


   SELECT MESSAGE_CONTENT
            , MESSAGE.MEMBER_CODE
            , MEMBER_NAME
            , MEMBER_ID
            , DATE_FORMAT(MESSAGE_DATE, '%Y-%m-%d ㅤ%p %l:%i') MESSAGE_DATE
            , TO_FROM
        FROM STUDYROOM_MESSAGE MESSAGE
        INNER JOIN STUDYROOM_MEMBER MEMBER
        ON MESSAGE.MEMBER_CODE = MEMBER.MEMBER_CODE
        WHERE TO_FROM = 'TO'
        ORDER BY MESSAGE_CODE DESC LIMIT 100;
        
        
SELECT COU.COUPON_CODE
		,  COU.MEMBER_CODE
		, MEMBER_NAME
		, MEMBER_ID
		, COUPON_NAME
		, DISCOUNT_PERCENT
FROM member_coupon COU
INNER JOIN STUDYROOM_MEMBER MEMBER
ON COU.MEMBER_CODE = MEMBER.MEMBER_CODE
INNER JOIN coupon PON
ON COU.COUPON_CODE = PON.COUPON_CODE;

SELECT SEAT_NUM
                , CASE
                    WHEN SEAT_POWER = 'ON' THEN '켜짐'
                    WHEN SEAT_POWER = 'OFF' THEN '꺼짐'
                    END SEAT_POWER
                , SEAT_FLOOR
                , SEAT.STATUS_NUM
                , STATUS_NAME
                , AGE_CODE
                , SEAT.MEMBER_CODE
        FROM STUDYROOM_SEAT SEAT
        INNER JOIN STUDYROOM_MEMBER MEMBER
        ON SEAT.MEMBER_CODE = MEMBER.MEMBER_CODE
        INNER JOIN seat_status STATUS
        ON SEAT.STATUS_NUM = STATUS.STATUS_NUM;
        
        
        
        
   SELECT SEAT_NUM
                , CASE
                    WHEN SEAT_POWER = 'ON' THEN '켜짐'
                    WHEN SEAT_POWER = 'OFF' THEN '꺼짐'
                    END SEAT_POWER
                , SEAT_FLOOR
                , CASE
                    WHEN SEAT.STATUS_NUM = 1 THEN '사용중'
                    WHEN SEAT.STATUS_NUM = 2 THEN '사용가능'
                    WHEN SEAT.STATUS_NUM = 3 THEN '수리중'
                    END STATUS_NUM
                , AGE_CODE
                , SEAT.MEMBER_CODE
        FROM STUDYROOM_SEAT SEAT
        INNER JOIN STUDYROOM_MEMBER MEMBER
        ON SEAT.MEMBER_CODE = MEMBER.MEMBER_CODE
        INNER JOIN seat_status STATUS
      
        ON SEAT.STATUS_NUM = STATUS.STATUS_NUM;
        
        
        
SELECT SEAT_NUM
            , CASE
                WHEN SEAT_POWER = 'ON' THEN '켜짐'
                WHEN SEAT_POWER = 'OFF' THEN '꺼짐'
                END SEAT_POWER
            , SEAT_FLOOR
            , SEAT.STATUS_NUM
            , AGE_CODE
            , SEAT.MEMBER_CODE
        FROM STUDYROOM_SEAT SEAT
        INNER JOIN STUDYROOM_MEMBER MEMBER
        ON SEAT.MEMBER_CODE = MEMBER.MEMBER_CODE
        INNER JOIN seat_status STATUS
        ON SEAT.STATUS_NUM = STATUS.STATUS_NUM;
        
        
CREATE TABLE PYTHON_BOARD (studyroom
	BOARD_NUM INT PRIMARY KEY
	, TITLE VARCHAR(50)
	, WRITER VARCHAR(50)
	, READ_CNT INT
);

SELECT * FROM air_quality;

SELECT AIR_NO
		, PM_CODE
		, PM_GRADE
		, FPM_CODE
		, FPM_GRADE
		, CO2_CODE
		, VOCS_CODE
		, SERIAL_NO
FROM air_quality;

SELECT CICI_NO
            , CICI_CODE
            , CICI_GRADE
            , SERIAL_NO
        FROM cici;
        
        
SELECT AP.CHARGE_CODE
		, CHARGE_DATE
		, MEMBER_CODE
FROM approval AP
INNER JOIN studyroom_charge CH
ON AP.CHARGE_CODE = CH.CHARGE_CODE;


 SELECT CHARGE_DATE
        FROM APPROVAL AP
        INNER JOIN STUDYROOM_CHARGE CH
        ON AP.CHARGE_CODE = CH.CHARGE_CODE;



        SELECT CHARGE_DATE
        FROM APPROVAL AP
        INNER JOIN STUDYROOM_CHARGE CH
        ON AP.CHARGE_CODE = CH.CHARGE_CODE;
        
        
SELECT CHARGE_CODE
		, CHARGE_NAME
FROM STUDYROOM_CHARGE;



SELECT AP.CHARGE_CODE
		, CHARGE_NAME
		, CHARGE_FEE
FROM approval AP
INNER JOIN studyroom_charge CH;

   SELECT APPROVAL_CODE
				, AP.CHARGE_CODE
            , CHARGE_NAME
            , APPROVAL_FEE
        FROM APPROVAL AP  
        INNER JOIN  STUDYROOM_CHARGE CH
        ON AP.CHARGE_CODE = CH.CHARGE_CODE;
        
SELECT COUNT(CHARGE_CODE)
FROM SALES_INFO
GROUP BY CHARGE_CODE;

 SELECT COUNT(SALES_CODE) CNT
            , SALE.CHARGE_CODE
            , SUM(SALES_FEE)
            , CHARGE_NAME
        FROM SALES_INFO SALE
        INNER JOIN STUDYROOM_CHARGE CHARG
        ON SALE.CHARGE_CODE = CHARG.CHARGE_CODE
        GROUP BY CHARGE_CODE
        ORDER BY CNT DESC;


SELECT MONTH(SALES_DATE) MONTH_SALES
      , SUM(SALES_FEE) SALES_FEE
FROM sales_info
WHERE YEAR(SALES_DATE) = YEAR(NOW())
GROUP BY MONTH(SALES_DATE);


-- 연간 매출.?
SELECT YEAR(SALES_DATE) YEAR_SALES
   , SUM(SALES_FEE) SALES_FEE
FROM SALES_INFO
GROUP BY YEAR(SALES_DATE);

-- 통계 없는 월
SELECT dates.d, COUNT(sales.sales) as sales_total
FROM (
  SELECT DATE('2023-03-01') + INTERVAL seq DAY as d
  FROM GENERATE_SERIES(0, DATEDIFF('2023-03-31', '2023-03-01')) as s(seq)
) as dates
LEFT JOIN sales ON dates.d = sales.sales_date
GROUP BY dates.d;


SELECT DATE_FORMAT(SALES_DATE, '%y') YEAR_SALES
	, MONTH(SALES_DATE) MONTH_SALES
   , SUM(SALES_FEE) SALES_FEE
FROM SALES_INFO
GROUP BY DATE_FORMAT(SALES_DATE, '%y'), MONTH(SALES_DATE)
ORDER BY DATE_FORMAT(SALES_DATE, '%y') DESC, MONTH(SALES_DATE) DESC;



WITH RECURSIVE CTE AS (
 SELECT 1 AS MONTH
--	SELECT CONCAT(DATE_FORMAT(DATE_ADD(NOW(), INTERVAL -1 YEAR), '%Y년 ') , 4, '월') AS MONTH
	UNION ALL
	SELECT MONTH + 1 FROM CTE
	WHERE MONTH < 12
)
SELECT MONTH FROM CTE;


SELECT MONTH(NOW());




WITH RECURSIVE CTE AS (
	SELECT *
	FROM
	(
		WITH RECURSIVE CTE2 AS (
	 		SELECT 4 AS MONTH
			UNION ALL
			SELECT MONTH + 1 FROM CTE2
		WHERE MONTH < 12
		)
		SELECT CONCAT(DATE_FORMAT(DATE_ADD(NOW(), INTERVAL -1 YEAR), '%Y년 '), MONTH, '월') AS MONTH FROM CTE2
	) A
	UNION ALL
	SELECT *
	FROM 
	(
		WITH RECURSIVE CTE1 AS (
	 		SELECT 1 AS MONTH
			UNION ALL
			SELECT MONTH + 1 FROM CTE1
		WHERE MONTH < 4
		)
		SELECT CONCAT(DATE_FORMAT(NOW(), '%Y년 '), MONTH, '월') AS MONTH FROM CTE1
	) B
)
SELECT MONTH 
	, IFNULL(SUM(SALES_FEE), 0) SALES_FEE
FROM CTE A
LEFT OUTER JOIN 
sales_info B
ON A.MONTH = DATE_FORMAT(SALES_DATE, '%Y년 %c월')
GROUP BY MONTH
ORDER BY SUBSTRING(MONTH, 1, 4)  ASC,  SUBSTRING(MONTH, 7);


SELECT DATE_FORMAT(SALES_DATE, '%Y년 %c월') FROM sales_info;
select * FROM sales_info;
GROUP BY month;






SELECT CONCAT(DATE_FORMAT(NOW(), '%Y년'), '년 ', DATE_FORMAT(NOW(), '%m'), '월') ;

SELECT DATE_FORMAT(NOW(), '%Y년 %m월')
	, DATE_FORMAT(NOW(), '%Y년 %m월');
	
	SELECT DATE_ADD(NOW(), INTERVAL -1 YEAR);




SELECT DATE_FORMAT(NOW(), '%y'), MONTH(NOW())
;


SELECT * FROM sales_info;

WITH RECURSIVE CTE AS (
	SELECT 1 AS MONTH_SALES
	UNION ALL
	SELECT MONTH_SALES + 1 FROM CTE
	WHERE MONTH_SALES < 12
)
SELECT MONTH_SALES FROM CTE;

SELECT MONTH(SALES_DATE), 
	SUM(SALES_FEE) SALES_FEE
FROM sales_info
GROUP BY MONTH(SALES_DATE);

SELECT SALES_DATE, 
	SALES_FEE
FROM sales_info A
INNER JOIN 
(
	SELECT 1,2,3;
);

ON A.MONTH(SALES_DATE) = B.MONTH_SALES;


WITH RECURSIVE CTE AS (
	SELECT 1 AS MONTH
	UNION ALL
	SELECT MONTH + 1 FROM CTE
	WHERE MONTH < 12
)
SELECT MONTH 
	, IFNULL(SUM(SALES_FEE), 0)

FROM CTE A
LEFT OUTER JOIN sales_info B
ON A.MONTH = MONTH(B.SALES_DATE)

GROUP BY MONTH
ORDER BY MONTH;




SELECT MONTH(SALES_DATE) FROM sales_info;





-- ----------------------------------------------------------------
-- 올해의 월별 데이터 (where절 하나 더 넣어야됨)
WITH RECURSIVE CTE AS (
	SELECT 1 AS MONTH
	UNION ALL
	SELECT MONTH + 1 FROM CTE
	WHERE MONTH < 12
)
SELECT MONTH 
	, IFNULL(SUM(SALES_FEE), 0)
FROM CTE A
LEFT OUTER JOIN sales_info B
ON A.MONTH = MONTH(B.SALES_DATE)
GROUP BY MONTH
ORDER BY MONTH;



-- -------------------------------------------------------------------------

WITH RECURSIVE YEAR_DATE AS (
	SELECT *
	FROM
	(
		WITH RECURSIVE CUR_DATE AS (
	 		SELECT MONTH(NOW()) AS MONTH
			UNION ALL
			SELECT MONTH + 1 FROM CUR_DATE
		WHERE MONTH < 12
		)
		SELECT CONCAT(DATE_FORMAT(DATE_ADD(NOW(), INTERVAL -1 YEAR), '%Y년 '), MONTH, '월') AS SALES_YEAR FROM CUR_DATE
	) A
	UNION ALL
	SELECT *
	FROM 
	(
		WITH RECURSIVE PRE_DATE AS (
	 		SELECT 1 AS MONTH
			UNION ALL
			SELECT MONTH + 1 FROM PRE_DATE
		WHERE MONTH < MONTH(NOW())
		)
		SELECT CONCAT(DATE_FORMAT(NOW(), '%Y년 '), MONTH, '월') AS SALES_YEAR FROM PRE_DATE
	) B
)
SELECT SALES_YEAR
	, IFNULL(SUM(SALES_FEE), 0) SALES_FEE
FROM  YEAR_DATE A
LEFT OUTER JOIN 
sales_info B
ON A.SALES_YEAR = DATE_FORMAT(SALES_DATE, '%Y년 %c월')
GROUP BY SALES_YEAR
ORDER BY SALES_CODE ASC;



SELECT
  COALESCE(SUM(SALES_FEE), 0) AS sales_fee,
  DATE_FORMAT(months.month, '%y년 %c월') AS MONTH_SALES
FROM (
  SELECT DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 12 MONTH), '%Y-%m-01') AS month
  UNION ALL
  SELECT DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 11 MONTH), '%Y-%m-01')
  UNION ALL
  SELECT DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 10 MONTH), '%Y-%m-01')
  UNION ALL
  SELECT DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 9 MONTH), '%Y-%m-01')
  UNION ALL
  SELECT DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 8 MONTH), '%Y-%m-01')
  UNION ALL
  SELECT DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 7 MONTH), '%Y-%m-01')
  UNION ALL
  SELECT DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 6 MONTH), '%Y-%m-01')
  UNION ALL
  SELECT DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 5 MONTH), '%Y-%m-01')
  UNION ALL
  SELECT DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 4 MONTH), '%Y-%m-01')
  UNION ALL
  SELECT DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 3 MONTH), '%Y-%m-01')
  UNION ALL
  SELECT DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 2 MONTH), '%Y-%m-01')
  UNION ALL
  SELECT DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 1 MONTH), '%Y-%m-01')
  UNION ALL
  SELECT DATE_FORMAT(NOW(), '%Y-%m-01')
) AS months
LEFT JOIN SALES_INFO ON DATE_FORMAT(SALES_DATE, '%Y-%m-01') = months.month
GROUP BY DATE_FORMAT(months.month, '%y년%c월')
ORDER BY months.month;



SELECT
  COALESCE(SUM(sales_fee), 0) AS sales_fee,
  DATE_FORMAT(months.month, '%Y년') AS year
FROM (
  SELECT DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 4 YEAR), '%Y-01-01') AS month
  UNION ALL
  SELECT DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 3 YEAR), '%Y-01-01')
  UNION ALL
  SELECT DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 2 YEAR), '%Y-01-01')
  UNION ALL
  SELECT DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 1 YEAR), '%Y-01-01')
  UNION ALL
  SELECT DATE_FORMAT(NOW(), '%Y-01-01')
) AS months
LEFT JOIN (
  SELECT DATE_FORMAT(SALES_DATE, '%Y-01-01') AS month, SALES_FEE
  FROM SALES_INFO
) AS sales_info ON months.month = sales_info.month
GROUP BY YEAR(months.month)
ORDER BY YEAR(months.month);


DELETE FROM board
WHERE BOARD_NUM > 10;



DATE_FORMAT(months.month, '%y년%c월') AS MONTH_SALES





SELECT
        COALESCE(SUM(SALES_FEE), 0) AS sales_fee,
        CONCAT(DATE_FORMAT(months.month('%y년', '/n', '%c월'))) AS MONTH_SALES
        DATE_FORMAT(months.month, '%y년%c월') AS MONTH_SALES
        FROM (
        SELECT DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 12 MONTH), '%Y-%m-01') AS month
        UNION ALL
        SELECT DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 11 MONTH), '%Y-%m-01')
        UNION ALL
        SELECT DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 10 MONTH), '%Y-%m-01')
        UNION ALL
        SELECT DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 9 MONTH), '%Y-%m-01')
        UNION ALL
        SELECT DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 8 MONTH), '%Y-%m-01')
        UNION ALL
        SELECT DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 7 MONTH), '%Y-%m-01')
        UNION ALL
        SELECT DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 6 MONTH), '%Y-%m-01')
        UNION ALL
        SELECT DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 5 MONTH), '%Y-%m-01')
        UNION ALL
        SELECT DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 4 MONTH), '%Y-%m-01')
        UNION ALL
        SELECT DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 3 MONTH), '%Y-%m-01')
        UNION ALL
        SELECT DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 2 MONTH), '%Y-%m-01')
        UNION ALL
        SELECT DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 1 MONTH), '%Y-%m-01')
        UNION ALL
        SELECT DATE_FORMAT(NOW(), '%Y-%m-01')
        ) AS months
        LEFT JOIN SALES_INFO ON DATE_FORMAT(SALES_DATE, '%Y-%m-01') = months.month
        GROUP BY DATE_FORMAT(months.month, '%y년%c월')
        ORDER BY months.month;
        
        
-- 지급된 쿠폰의 갯수 조회하기
SELECT COUPON_NAME
		, DISCOUNT_PERCENT
		, COUNT(*) AS CNT
FROM member_coupon MC
INNER JOIN coupon C
ON MC.COUPON_CODE = C.COUPON_CODE
GROUP BY MC.COUPON_CODE HAVING COUNT(*) > 0
ORDER BY CNT DESC;

SELECT * FROM BOARD_MEMBER;

SELECT OWN_COUPON_CODE
	, COUPON_CODE
	, (SELECT COUPON_NAME FROM coupon WHERE COUPON_CODE = member_coupon.COUPON_CODE) COUPON_NAME
	, (SELECT DISCOUNT_PERCENT FROM coupon WHERE COUPON_CODE = member_coupon.COUPON_CODE) DISCOUNT_PERCENT
	, COUNT(*) AS CNT
FROM member_coupon
GROUP BY COUPON_CODE
ORDER BY DISCOUNT_PERCENT DESC;




DROP TABLE sales_info;
DROP TABLE car_info;


-- 제약조건 넣기1
CREATE TABLE car_info (
	CAR_NUM INT AUTO_INCREMENT
	, MODEL_NAME VARCHAR(50) NOT NULL
	, PRICE INT NOT NULL
	, MADE_BY VARCHAR(50) NOT NULL
	, CONSTRAINT CAR_INFO_PK PRIMARY KEY (CAR_NUM)
);

SELECT * FROM sales_info;
SELECT * FROM car_info;



-- 제약조건 넣기2
-- CASCADE : 지울 때 외래키 오류 안생김
CREATE TABLE sales_info (
	SALES_NUM INT AUTO_INCREMENT PRIMARY KEY
	, BUYER VARCHAR(50) NOT NULL
	, TEL VARCHAR(50) 
	, COLOR VARCHAR(50) NOT NULL
	, SALES_DATE DATETIME DEFAULT CURRENT_TIMESTAMP
	, CAR_NUM INT NOT NULL REFERENCES car_info (CAR_NUM) ON DELETE CASCADE
	, CONSTRAINT CAR_SALES_FK FOREIGN KEY (CAR_NUM) REFERENCES car_info (CAR_NUM) ON DELETE CASCADE
);

INSERT INTO SALES_INFO VALUES (2, 'A', '010', 'RED', NOW(), 1);
COMMIT;

-- CAR_INFO 테이블에서 CAR_NUM이 1인 데이터 삭제
DELETE FROM car_info
WHERE CAR_NUM = 1;



-- 등급으로 분류하고 갯수 세기
SELECT AIR_NO
   , PM_CODE
   , PM_GRADE
   , FPM_CODE
   , FPM_GRADE
   , CO2_CODE
   , VOCS_CODE
   , SERIAL_NO
FROM air_quality
GROUP BY PM_GRADE, FPM_GRADE;


SELECT * FROM air_quality
ORDER BY AIR_TIME DESC;

-- 오늘의 미세먼지 등급
SELECT
  PM_GRADE
  , DATE_FORMAT(AIR_TIME, '%Y%m%d') AS RESULT_DATE
  , (COUNT(PM_GRADE) * 100 / (SELECT COUNT(PM_GRADE) FROM air_quality)) AS PM_PERCENT
FROM air_quality
WHERE DATE_FORMAT(AIR_TIME, '%Y%m%d') = DATE_FORMAT(NOW(), '%Y%m%d')
GROUP BY PM_GRADE
ORDER BY FIELD(PM_GRADE, '좋음', '보통', '나쁨', '매우 나쁨');




SELECT PM_GRADE
		, DATE_FORMAT(AIR_TIME, '%Y%m%d') AS RESULT_DATE
		, COUNT(PM_GRADE) AS CNT
FROM air_quality
WHERE DATE_FORMAT(AIR_TIME, '%Y%m%d') = DATE_FORMAT(NOW(), '%Y%m%d')
GROUP BY PM_GRADE
ORDER BY FIELD(PM_GRADE, '좋음', '보통', '나쁨', '매우 나쁨');



SELECT PM_GRADE
		, DATE_FORMAT(AIR_TIME, '%Y%m%d') AS RESULT_DATE
		, (COUNT(PM_GRADE) / (
			SELECT COUNT(*) 
			FROM air_quality 
			WHERE DATE_FORMAT(AIR_TIME, '%Y%m%d') = DATE_FORMAT(NOW(), '%Y%m%d'))
			) * 100 AS PM_PERCENT
FROM air_quality
WHERE DATE_FORMAT(AIR_TIME, '%Y%m%d') = DATE_FORMAT(NOW(), '%Y%m%d')
GROUP BY PM_GRADE
ORDER BY FIELD(PM_GRADE, '좋음', '보통', '나쁨', '매우 나쁨');




SELECT
  DECIBEL_GRADE
  , DATE_FORMAT(DECIBEL_TIME, '%Y%m%d') AS RESULT_DATE
  , (COUNT(DECIBEL_GRADE) * 100 / (SELECT COUNT(DECIBEL_GRADE) FROM decibel_info)) AS DECIBEL_PERCENT
  FROM decibel_info
  WHERE DATE_FORMAT(DECIBEL_TIME, '%Y%m%d') = DATE_FORMAT(NOW(), '%Y%m%d')
  GROUP BY DECIBEL_GRADE
  ORDER BY FIELD(DECIBEL_GRADE, '매우좋음', '좋음', '보통', '나쁨', '매우나쁨');
  
  
      SELECT CICI_GRADE
            , DATE_FORMAT(CICI_TIME, '%Y%m%d') AS RESULT_DATE
            , (COUNT(CICI_GRADE) / (
                SELECT COUNT(*)
                FROM cici
                WHERE DATE_FORMAT(CICI_TIME, '%Y%m%d') = DATE_FORMAT(NOW(), '%Y%m%d'))
                ) * 100 AS CICI_PERCENT
        FROM cici
        WHERE DATE_FORMAT(CICI_TIME, '%Y%m%d') = DATE_FORMAT(NOW(), '%Y%m%d')
        GROUP BY CICI_GRADE
        ORDER BY FIELD(CICI_GRADE, '좋음', '보통', '나쁨', '매우 나쁨');
        
        
-- 수정할 사항 : 한달 동안에 각 시설의 통합실내지수 평균 순위
SELECT ROUND(AVG(CICI_CODE), 2) AS CICI_CODE
	, STATION_NAME
	, C.SERIAL_NO
FROM CICI C
INNER JOIN MAP M
ON C.SERIAL_NO = M.SERIAL_NO
WHERE DATE_FORMAT(CICI_TIME, '%Y%m') = DATE_FORMAT(NOW(), '%Y%m')
GROUP BY STATION_NAME
ORDER BY CICI_CODE DESC LIMIT 5;

SELECT SALES_NUM
            , MODEL_NAME
            , PRICE
            , MADE_BY
            , BUYER
            , TEL
            , COLOR
            , SALES_DATE
        FROM SALES_INFO S
        INNER JOIN CAR_INFO C
        ON S.CAR_NUM = C.CAR_NUM
        ORDER BY SALES_DATE DESC;
        
        
-- 올해 스테디셀러 이용권 (가장 많이, 가장 좋은 매출)
SELECT CHARGE_CODE
		, SALES_FEE
		, DATE_FORMAT(SALES_DATE, '%Y')
		, COUNT(SALES_FEE) AS CNT
FROM sales_info
WHERE DATE_FORMAT(SALES_DATE, '%Y') = DATE_FORMAT(NOW(), '%Y')
GROUP BY CHARGE_CODE
ORDER BY COUNT(SALES_FEE) DESC;

-- 이번달  스테디셀러 이용권 (가장 많이, 가장 좋은 매출)
SELECT COUNT(SALES_CODE) CNT
      , SALE.CHARGE_CODE
      , SUM(SALES_FEE) SALES_FEE
      , CHARGE_NAME
      , CHARGE_FEE
FROM SALES_INFO SALE
INNER JOIN STUDYROOM_CHARGE CHARG
ON SALE.CHARGE_CODE = CHARG.CHARGE_CODE
WHERE DATE_FORMAT(SALES_DATE, '%Y-%m') = DATE_FORMAT(NOW(), '%Y-%m');
GROUP BY CHARGE_CODE
ORDER BY COUNT(SALES_FEE) DESC;
        
        
        
SELECT LEFT(DATE_ADD(NOW(), INTERVAL -1 MONTH), 7);

SELECT DATE_FORMAT(SALES_DATE, '%Y-%m-%d')
FROM sales_info;
        
SELECT DATE_FORMAT(SALES_DATE, '%Y-%m-%d %H:%i:%s')
FROM sales_info;
        
        
        
SELECT COUNT(SALES_CODE) CNT
   , SALE.CHARGE_CODE
   , SUM(SALES_FEE) SALES_FEE
   , CHARGE_NAME
   , CHARGE_FEE
FROM SALES_INFO SALE
INNER JOIN STUDYROOM_CHARGE CHARG
ON SALE.CHARGE_CODE = CHARG.CHARGE_CODE
GROUP BY CHARGE_CODE
ORDER BY CNT DESC;



  SELECT COUNT(SALES_CODE) CNT
        , SALE.CHARGE_CODE
        , SUM(SALES_FEE) SALES_FEE
        , CHARGE_NAME
        , CHARGE_FEE
        FROM SALES_INFO SALE
        INNER JOIN STUDYROOM_CHARGE CHARG
        ON SALE.CHARGE_CODE = CHARG.CHARGE_CODE
        WHERE DATE_FORMAT(SALES_DATE, '%Y%m') = DATE_FORMAT(NOW(), '%Y%m')
        GROUP BY CHARGE_CODE
        ORDER BY CNT DESC;
        
        
        
CHARGE_CODE

SELECT C.CHARGE_CODE
	, CHARGE_NAME
	, COALESCE(SUM(SALES_FEE), 0) AS sales_fee
	, DATE_FORMAT(months.month, '%y년 %c월') AS MONTH_SALES
   	FROM (
      SELECT DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 12 MONTH), '%Y-%m-01') AS month     
		UNION ALL
		
	   SELECT DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 11 MONTH), '%Y-%m-01')
	   UNION ALL
	     
	   SELECT DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 10 MONTH), '%Y-%m-01')
	   UNION ALL
	     
	   SELECT DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 9 MONTH), '%Y-%m-01')
	   UNION ALL
	     
	   SELECT DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 8 MONTH), '%Y-%m-01')
	   UNION ALL
	     
	   SELECT DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 7 MONTH), '%Y-%m-01')
	   UNION ALL
	     
	   SELECT DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 6 MONTH), '%Y-%m-01')
	   UNION ALL
	     
	   SELECT DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 5 MONTH), '%Y-%m-01')
	   UNION ALL
	     
	   SELECT DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 4 MONTH), '%Y-%m-01')
	   UNION ALL
	     
	   SELECT DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 3 MONTH), '%Y-%m-01')
	   UNION ALL
	     
	   SELECT DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 2 MONTH), '%Y-%m-01')
	   UNION ALL
	     
	   SELECT DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 1 MONTH), '%Y-%m-01')
	   UNION ALL
	     
	   SELECT DATE_FORMAT(NOW(), '%Y-%m-01')
      ) AS months
LEFT JOIN sales_info S
ON DATE_FORMAT(SALES_DATE, '%Y-%m-01') = months.month
INNER JOIN studyroom_charge C
ON S.CHARGE_CODE = C.CHARGE_CODE
GROUP BY CHARGE_CODE, DATE_FORMAT(months.month, '%y년%c월')
ORDER BY CHARGE_FEE;



 SELECT C.CHARGE_CODE
        , CHARGE_NAME
        , COALESCE(SUM(SALES_FEE), 0) AS sales_fee
        , DATE_FORMAT(months.month, '%y년 %c월') AS MONTH_SALES
        FROM (
        SELECT DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 12 MONTH), '%Y-%m-01') AS month
        UNION ALL
        SELECT DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 11 MONTH), '%Y-%m-01')
        UNION ALL
        SELECT DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 10 MONTH), '%Y-%m-01')
        UNION ALL
        SELECT DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 9 MONTH), '%Y-%m-01')
        UNION ALL
        SELECT DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 8 MONTH), '%Y-%m-01')
        UNION ALL
        SELECT DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 7 MONTH), '%Y-%m-01')
        UNION ALL
        SELECT DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 6 MONTH), '%Y-%m-01')
        UNION ALL
        SELECT DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 5 MONTH), '%Y-%m-01')
        UNION ALL
        SELECT DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 4 MONTH), '%Y-%m-01')
        UNION ALL
        SELECT DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 3 MONTH), '%Y-%m-01')
        UNION ALL
        SELECT DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 2 MONTH), '%Y-%m-01')
        UNION ALL
        SELECT DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 1 MONTH), '%Y-%m-01')
        UNION ALL
        SELECT DATE_FORMAT(NOW(), '%Y-%m-01')
        ) AS months
        LEFT JOIN sales_info S
        ON DATE_FORMAT(SALES_DATE, '%Y-%m-01') = months.month
        INNER JOIN studyroom_charge C
        ON S.CHARGE_CODE = C.CHARGE_CODE
        GROUP BY CHARGE_CODE, DATE_FORMAT(months.month, '%y년%c월')
        ORDER BY CHARGE_FEE;
        
        
SELECT * FROM sales_info;



SELECT CHARGE_CODE
		, SUM(SALES_FEE)
FROM sales_info
GROUP BY CHARGE_CODE;



SELECT  DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 2 MONTH), '%Y-%m') AS MONTH ,COUNT(SALES_FEE) SUM
FROM sales_info
WHERE DATE_FORMAT(SALES_DATE, '%Y-%m') = DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 2 MONTH), '%Y-%m') 
UNION ALL
SELECT  DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 1 MONTH), '%Y-%m') AS MONTH ,COUNT(SALES_FEE) SUM
FROM sales_info
WHERE DATE_FORMAT(SALES_DATE, '%Y-%m') = DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 1 MONTH), '%Y-%m') 
UNION ALL
SELECT DATE_FORMAT(NOW(), '%Y-%m') AS MONTH ,COUNT(SALES_FEE) SUM
FROM sales_info
WHERE DATE_FORMAT(SALES_DATE, '%Y-%m') = DATE_FORMAT(NOW(), '%Y-%m');

-- --------------------------------------------------------------------------------
SELECT  DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 2 MONTH), '%Y-%m') AS MONTH ,COUNT(SALES_FEE) SUM
FROM sales_info
WHERE DATE_FORMAT(SALES_DATE, '%Y-%m') = DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 2 MONTH), '%Y-%m') 
UNION ALL
SELECT  DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 1 MONTH), '%Y-%m') AS MONTH ,COUNT(SALES_FEE) SUM
FROM sales_info
WHERE DATE_FORMAT(SALES_DATE, '%Y-%m') = DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 1 MONTH), '%Y-%m') 
UNION ALL
SELECT DATE_FORMAT(NOW(), '%Y-%m') AS MONTH ,COUNT(SALES_FEE) SUM
FROM sales_info
WHERE DATE_FORMAT(SALES_DATE, '%Y-%m') = DATE_FORMAT(NOW(), '%Y-%m');




SELECT DATE_FORMAT(NOW(), '%Y-%m') AS MONTH ,COUNT(SALES_FEE) SUM, '7일권'
FROM sales_info
WHERE DATE_FORMAT(SALES_DATE, '%Y-%m') = DATE_FORMAT(NOW(), '%Y-%m')
AND CHARGE_CODE = 1
UNION ALL
SELECT DATE_FORMAT(NOW(), '%Y-%m') AS MONTH ,COUNT(SALES_FEE) SUM, 'ㅁㅁㅁ'
FROM sales_info
WHERE DATE_FORMAT(SALES_DATE, '%Y-%m') = DATE_FORMAT(NOW(), '%Y-%m')
AND CHARGE_CODE = 2;

SELECT  DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 1 MONTH), '%Y-%m') AS MONTH ,COUNT(SALES_FEE) SUM
FROM sales_info
WHERE DATE_FORMAT(SALES_DATE, '%Y-%m') = DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 1 MONTH), '%Y-%m') 














SELECT SALES_CODE ,SALES_FEE, A.CHARGE_CODE, B.CHARGE_CODE, DATE_FORMAT(SALES_DATE, '%Y-%m')
FROM sales_info A
INNER JOIN
(
	SELECT CHARGE_CODE
		, CHARGE_NAME
	FROM studyroom_charge
) B
 -- ON A.CHARGE_CODE = B.CHARGE_CODE
 WHERE DATE_FORMAT(SALES_DATE, '%Y-%m') = DATE_FORMAT(NOW(), '%Y-%m');
-- AND B.CHARGE_CODE = 1;



SELECT * FROM sales_info
WHERE DATE_FORMAT(SALES_DATE, '%Y') = DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 1 YEAR), '%Y');

SELECT * FROM studyroom_charge;


-- '종신형 독서실'
SELECT MONTH, SUM(SUM), TYPE_NAME, MAX(TYPE_CODE), SUM(SALES_FEE)
FROM
(
SELECT  DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 3 MONTH), '%Y-%m') AS MONTH ,COUNT(SALES_FEE) SUM, '독서실 종신형' TYPE_NAME, 6 AS TYPE_CODE
            FROM sales_info
            WHERE DATE_FORMAT(SALES_DATE, '%Y-%m') = DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 3 MONTH), '%Y-%m')
            AND CHARGE_CODE = 6
            UNION ALL
            SELECT  DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 2 MONTH), '%Y-%m') AS MONTH ,COUNT(SALES_FEE) SUM, '독서실 종신형', 6
            FROM sales_info
            WHERE DATE_FORMAT(SALES_DATE, '%Y-%m') = DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 2 MONTH), '%Y-%m')
            AND CHARGE_CODE = 6
            UNION ALL
            SELECT  DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 1 MONTH), '%Y-%m') AS MONTH ,COUNT(SALES_FEE) SUM, '독서실 종신형', 6
            FROM sales_info
            WHERE DATE_FORMAT(SALES_DATE, '%Y-%m') = DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 1 MONTH), '%Y-%m')
            AND CHARGE_CODE = 6
            UNION ALL
            SELECT DATE_FORMAT(NOW(), '%Y-%m') AS MONTH ,COUNT(SALES_FEE) SUM, '독서실 종신형', 6
            FROM sales_info
            WHERE DATE_FORMAT(SALES_DATE, '%Y-%m') = DATE_FORMAT(NOW(), '%Y-%m')
            AND CHARGE_CODE = 6
         UNION ALL 
            SELECT  DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 3 MONTH), '%Y-%m') AS MONTH ,COUNT(SALES_FEE) SUM, '스파르타 공부법', 9
            FROM sales_info
            WHERE DATE_FORMAT(SALES_DATE, '%Y-%m') = DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 3 MONTH), '%Y-%m')
            AND CHARGE_CODE = 9
            UNION ALL
            SELECT  DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 2 MONTH), '%Y-%m') AS MONTH ,COUNT(SALES_FEE) SUM, '스파르타 공부법', 9
            FROM sales_info
            WHERE DATE_FORMAT(SALES_DATE, '%Y-%m') = DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 2 MONTH), '%Y-%m')
            AND CHARGE_CODE = 9
            UNION ALL
            SELECT  DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 1 MONTH), '%Y-%m') AS MONTH ,COUNT(SALES_FEE) SUM, '스파르타 공부법', 9
            FROM sales_info
            WHERE DATE_FORMAT(SALES_DATE, '%Y-%m') = DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 1 MONTH), '%Y-%m')
            AND CHARGE_CODE = 9
            UNION ALL
            SELECT DATE_FORMAT(NOW(), '%Y-%m') AS MONTH ,COUNT(SALES_FEE) SUM, '스파르타 공부법', 9
            FROM sales_info
            WHERE DATE_FORMAT(SALES_DATE, '%Y-%m') = DATE_FORMAT(NOW(), '%Y-%m')
            AND CHARGE_CODE = 9
         UNION ALL 
            SELECT  DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 3 MONTH), '%Y-%m') AS MONTH ,COUNT(SALES_FEE) SUM, '잠은 죽어서 자라', 13
            FROM sales_info
            WHERE DATE_FORMAT(SALES_DATE, '%Y-%m') = DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 3 MONTH), '%Y-%m')
            AND CHARGE_CODE = 13
            UNION ALL
            SELECT  DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 2 MONTH), '%Y-%m') AS MONTH ,COUNT(SALES_FEE) SUM, '잠은 죽어서 자라', 13
            FROM sales_info
            WHERE DATE_FORMAT(SALES_DATE, '%Y-%m') = DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 2 MONTH), '%Y-%m')
            AND CHARGE_CODE = 13
            UNION ALL
            SELECT  DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 1 MONTH), '%Y-%m') AS MONTH ,COUNT(SALES_FEE) SUM, '잠은 죽어서 자라', 13
            FROM sales_info
            WHERE DATE_FORMAT(SALES_DATE, '%Y-%m') = DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 1 MONTH), '%Y-%m')
            AND CHARGE_CODE = 13
            UNION ALL
            SELECT DATE_FORMAT(NOW(), '%Y-%m') AS MONTH ,COUNT(SALES_FEE) SUM, '잠은 죽어서 자라', 13, SUM(SALES_FEE)
            FROM sales_info
            WHERE DATE_FORMAT(SALES_DATE, '%Y-%m') = DATE_FORMAT(NOW(), '%Y-%m')
            AND CHARGE_CODE = 13
         UNION ALL 
            SELECT  DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 3 MONTH), '%Y-%m') AS MONTH ,COUNT(SALES_FEE) SUM, '30일', 1, SUM(SALES_FEE)
            FROM sales_info
            WHERE DATE_FORMAT(SALES_DATE, '%Y-%m') = DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 3 MONTH), '%Y-%m')
            AND CHARGE_CODE = 1
            UNION ALL
            SELECT  DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 2 MONTH), '%Y-%m') AS MONTH ,COUNT(SALES_FEE) SUM, '30일', 1, SUM(SALES_FEE)
            FROM sales_info
            WHERE DATE_FORMAT(SALES_DATE, '%Y-%m') = DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 2 MONTH), '%Y-%m')
            AND CHARGE_CODE = 1
            UNION ALL
            SELECT  DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 1 MONTH), '%Y-%m') AS MONTH ,COUNT(SALES_FEE) SUM, '30일', 1, SUM(SALES_FEE)
            FROM sales_info
            WHERE DATE_FORMAT(SALES_DATE, '%Y-%m') = DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 1 MONTH), '%Y-%m')
            AND CHARGE_CODE = 1
            UNION ALL
            SELECT DATE_FORMAT(NOW(), '%Y-%m') AS MONTH ,COUNT(SALES_FEE) SUM, '30일', 1, SUM(SALES_FEE)
            FROM sales_info
            WHERE DATE_FORMAT(SALES_DATE, '%Y-%m') = DATE_FORMAT(NOW(), '%Y-%m')
            AND CHARGE_CODE = 1
         UNION ALL 
            SELECT  DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 3 MONTH), '%Y-%m') AS MONTH ,COUNT(SALES_FEE) SUM, '21일', 2, SUM(SALES_FEE)
            FROM sales_info
            WHERE DATE_FORMAT(SALES_DATE, '%Y-%m') = DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 3 MONTH), '%Y-%m')
            AND CHARGE_CODE = 2
            UNION ALL
            SELECT  DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 2 MONTH), '%Y-%m') AS MONTH ,COUNT(SALES_FEE) SUM, '21일', 2, SUM(SALES_FEE)
            FROM sales_info
            WHERE DATE_FORMAT(SALES_DATE, '%Y-%m') = DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 2 MONTH), '%Y-%m')
            AND CHARGE_CODE = 2
            UNION ALL
            SELECT  DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 1 MONTH), '%Y-%m') AS MONTH ,COUNT(SALES_FEE) SUM, '21일', 2, SUM(SALES_FEE)
            FROM sales_info
            WHERE DATE_FORMAT(SALES_DATE, '%Y-%m') = DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 1 MONTH), '%Y-%m')
            AND CHARGE_CODE = 2
            UNION ALL
            SELECT DATE_FORMAT(NOW(), '%Y-%m') AS MONTH ,COUNT(SALES_FEE) SUM, '21일', 2, SUM(SALES_FEE)
            FROM sales_info
            WHERE DATE_FORMAT(SALES_DATE, '%Y-%m') = DATE_FORMAT(NOW(), '%Y-%m')
            AND CHARGE_CODE = 2
         UNION ALL 
            SELECT  DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 3 MONTH), '%Y-%m') AS MONTH ,COUNT(SALES_FEE) SUM, '14일', 3, SUM(SALES_FEE)
            FROM sales_info
            WHERE DATE_FORMAT(SALES_DATE, '%Y-%m') = DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 3 MONTH), '%Y-%m')
            AND CHARGE_CODE = 3
            UNION ALL
            SELECT  DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 2 MONTH), '%Y-%m') AS MONTH ,COUNT(SALES_FEE) SUM, '14일', 3, SUM(SALES_FEE)
            FROM sales_info
            WHERE DATE_FORMAT(SALES_DATE, '%Y-%m') = DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 2 MONTH), '%Y-%m')
            AND CHARGE_CODE = 3
            UNION ALL
            SELECT  DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 1 MONTH), '%Y-%m') AS MONTH ,COUNT(SALES_FEE) SUM, '14일', 3, SUM(SALES_FEE)
            FROM sales_info
            WHERE DATE_FORMAT(SALES_DATE, '%Y-%m') = DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 1 MONTH), '%Y-%m')
            AND CHARGE_CODE = 3
            UNION ALL
            SELECT DATE_FORMAT(NOW(), '%Y-%m') AS MONTH ,COUNT(SALES_FEE) SUM, '14일', 3, SUM(SALES_FEE)
            FROM sales_info
            WHERE DATE_FORMAT(SALES_DATE, '%Y-%m') = DATE_FORMAT(NOW(), '%Y-%m')
            AND CHARGE_CODE = 3
         UNION ALL 
            SELECT  DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 3 MONTH), '%Y-%m') AS MONTH ,COUNT(SALES_FEE) SUM, '7일', 4, SUM(SALES_FEE)
            FROM sales_info
            WHERE DATE_FORMAT(SALES_DATE, '%Y-%m') = DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 3 MONTH), '%Y-%m')
            AND CHARGE_CODE = 4
            UNION ALL
            SELECT  DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 2 MONTH), '%Y-%m') AS MONTH ,COUNT(SALES_FEE) SUM, '7일', 4, SUM(SALES_FEE)
            FROM sales_info
            WHERE DATE_FORMAT(SALES_DATE, '%Y-%m') = DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 2 MONTH), '%Y-%m')
            AND CHARGE_CODE = 4
            UNION ALL
            SELECT  DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 1 MONTH), '%Y-%m') AS MONTH ,COUNT(SALES_FEE) SUM, '7일', 4, SUM(SALES_FEE)
            FROM sales_info
            WHERE DATE_FORMAT(SALES_DATE, '%Y-%m') = DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 1 MONTH), '%Y-%m')
            AND CHARGE_CODE = 4
            UNION ALL
            SELECT DATE_FORMAT(NOW(), '%Y-%m') AS MONTH ,COUNT(SALES_FEE) SUM, '7일', 4, SUM(SALES_FEE)
            FROM sales_info
            WHERE DATE_FORMAT(SALES_DATE, '%Y-%m') = DATE_FORMAT(NOW(), '%Y-%m')
            AND CHARGE_CODE = 4
         UNION ALL 
            SELECT  DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 3 MONTH), '%Y-%m') AS MONTH ,COUNT(SALES_FEE) SUM, '1일', 5, SUM(SALES_FEE)
            FROM sales_info
            WHERE DATE_FORMAT(SALES_DATE, '%Y-%m') = DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 3 MONTH), '%Y-%m')
            AND CHARGE_CODE = 5
            UNION ALL
            SELECT  DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 2 MONTH), '%Y-%m') AS MONTH ,COUNT(SALES_FEE) SUM, '1일', 5, SUM(SALES_FEE)
            FROM sales_info
            WHERE DATE_FORMAT(SALES_DATE, '%Y-%m') = DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 2 MONTH), '%Y-%m')
            AND CHARGE_CODE = 5
            UNION ALL
            SELECT  DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 1 MONTH), '%Y-%m') AS MONTH ,COUNT(SALES_FEE) SUM, '1일', 5, SUM(SALES_FEE)
            FROM sales_info
            WHERE DATE_FORMAT(SALES_DATE, '%Y-%m') = DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 1 MONTH), '%Y-%m')
            AND CHARGE_CODE = 5
            UNION ALL
            SELECT DATE_FORMAT(NOW(), '%Y-%m') AS MONTH ,COUNT(SALES_FEE) SUM, '1일', 5, SUM(SALES_FEE)
            FROM sales_info
            WHERE DATE_FORMAT(SALES_DATE, '%Y-%m') = DATE_FORMAT(NOW(), '%Y-%m')
            AND CHARGE_CODE = 5
) RESULT
GROUP BY MONTH, TYPE_NAME;            


SELECT DATE_FORMAT(NOW(), '%Y-%m') AS MONTH , SUM(SALES_FEE) SUM, '1일', 5
FROM sales_info
WHERE DATE_FORMAT(SALES_DATE, '%Y-%m') = DATE_FORMAT(NOW(), '%Y-%m')
AND CHARGE_CODE = 5;

SELECT  DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 1 MONTH), '%Y-%m') AS MONTH ,SUM(SALES_FEE) SUM_FEE, '1일', 5
FROM sales_info
WHERE DATE_FORMAT(SALES_DATE, '%Y-%m') = DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 1 MONTH), '%Y-%m')
AND CHARGE_CODE = 5;


SELECT 
    DATE_FORMAT(SALES_DATE, '%Y-%m') AS MONTH,
    TYPE_NAME,
    CHARGE_CODE,
    COUNT(SALES_FEE) AS SALES_COUNT,
    SUM(SALES_FEE) AS TOTAL_SALES_FEE
FROM 
    sales_info
WHERE 
    SALES_DATE BETWEEN DATE_SUB(NOW(), INTERVAL 3 MONTH) AND NOW()
    AND CHARGE_CODE IN (1, 2, 3, 4, 5, 6, 9, 13) -- 원하는 CHARGE_CODE 리스트로 변경
GROUP BY 
    MONTH,
    TYPE_NAME,
    CHARGE_CODE;
    
    

SELECT  DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 12 MONTH), '%y년 %c월') AS MONTH
UNION ALL
SELECT  DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 11 MONTH), '%y년 %c월') AS MONTH
UNION ALL
SELECT  DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 10 MONTH), '%y년 %c월') AS MONTH
UNION ALL
SELECT  DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 9 MONTH), '%y년 %c월') AS MONTH
UNION ALL
SELECT  DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 8 MONTH), '%y년 %c월') AS MONTH
UNION ALL
SELECT  DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 7 MONTH), '%y년 %c월') AS MONTH
UNION ALL
SELECT  DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 6 MONTH), '%y년 %c월') AS MONTH
UNION ALL
SELECT  DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 5 MONTH), '%y년 %c월') AS MONTH
UNION ALL
SELECT  DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 4 MONTH), '%y년 %c월') AS MONTH
UNION ALL
SELECT  DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 3 MONTH), '%y년 %c월') AS MONTH
UNION ALL
SELECT  DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 2 MONTH), '%y년 %c월') AS MONTH
UNION ALL
SELECT  DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 1 MONTH), '%y년 %c월') AS MONTH
UNION ALL
SELECT DATE_FORMAT(NOW(), '%y년 %c월') AS MONTH;




SELECT * FROM sales_info;
SELECT * FROM studyroom_charge;

SELECT AIR_NO
		, SERIAL_NO
		, AIR_TIME
FROM air_quality
WHERE DATE_FORMAT(AIR_TIME, '%Y%m') = DATE_FORMAT(NOW(), '%Y%m')
-- GROUP BY SERIAL_NO
ORDER BY AIR_TIME DESC;


SELECT AIR_NO
		, SERIAL_NO
		, AIR_TIME
FROM air_quality
WHERE SERIAL_NO = 'ICW0W2000956'
ORDER BY AIR_TIME DESC;



SELECT ROUND(AVG(CICI_CODE), 2) AS CICI_CODE
   , STATION_NAME
   , C.SERIAL_NO
FROM CICI C
INNER JOIN MAP M
ON C.SERIAL_NO = M.SERIAL_NO
WHERE DATE_FORMAT(CICI_TIME, '%Y%m') = DATE_FORMAT(NOW(), '%Y%m')
GROUP BY STATION_NAME
ORDER BY CICI_CODE DESC LIMIT 30;

-- 중복 확인해보기
SELECT CICI_NO
		, SERIAL_NO
		, CICI_CODE
		, CICI_TIME
FROM cici
WHERE SERIAL_NO = 'ICW0W2001000'
AND DATE_FORMAT(CICI_TIME, '%Y-%m-%d %H') = DATE_FORMAT(NOW(), '%Y-%m-%d %H')
ORDER BY CICI_TIME DESC;


-- 디테일 페이지
SELECT A.SERIAL_NO
		, AIR_TIME
		, PM_CODE
		, PM_GRADE
		, FPM_CODE
		, FPM_GRADE
		, CICI_CODE
		, CICI_GRADE
		, CO2_CODE
		, VOCS_CODE
FROM air_quality A
INNER JOIN cici C
ON A.SERIAL_NO = C.SERIAL_NO
AND AIR_TIME = CICI_TIME
WHERE DATE_FORMAT(AIR_TIME, '%Y-%m-%d %H') = DATE_FORMAT(NOW(), '%Y-%m-%d %H');



SELECT FORMAT(AVG(PM_CODE), 2) PM_CODE
		, PM_GRADE
		, FORMAT(AVG(FPM_CODE), 2) FPM_CODE
		, FPM_GRADE
		, FORMAT(AVG(CICI_CODE), 2) CICI_CODE
		, CICI_GRADE
		, FORMAT(AVG(CO2_CODE), 2) CO2_CODE
		, FORMAT(AVG(VOCS_CODE), 2) VOCS_CODE
FROM air_quality A INNER JOIN cici C
ON A.SERIAL_NO = C.SERIAL_NO AND AIR_TIME = CICI_TIME
WHERE A.SERIAL_NO = 'ICW0W2000983'
AND DATE_FORMAT(AIR_TIME, '%Y%m%d') = DATE_FORMAT(NOW(), '%Y%m%d');





SELECT ROUND(AVG(PM_CODE)) PM_CODE
   , PM_GRADE
   , ROUND(AVG(FPM_CODE)) FPM_CODE
   , FPM_GRADE
   , ROUND(AVG(CICI_CODE)) CICI_CODE
   , CICI_GRADE
   , ROUND(AVG(CO2_CODE)) CO2_CODE
   , ROUND(AVG(VOCS_CODE)) VOCS_CODE
FROM air_quality A INNER JOIN cici C
ON A.SERIAL_NO = C.SERIAL_NO AND AIR_TIME = CICI_TIME
WHERE A.SERIAL_NO = 'ICW0W2000500'
AND DATE_FORMAT(AIR_TIME, '%Y%m%d') = DATE_FORMAT(NOW(), '%Y%m%d');

SELECT '2,500';

DESC air_quality;


      SELECT DATA_CODE
        , HOUR(DATE_TIME) DATE_TIME
        , MAX(TEMPERATURE) MAX_TEMPERATURE
        , MAX(HUMIDITY) MAX_HUMIDITY
        , MIN(TEMPERATURE) MIN_TEMPERATURE
        , MIN(HUMIDITY) MIN_HUMIDITY
			, DATE_TIME
        FROM temandhum
        WHERE DATE_FORMAT(DATE_TIME, '%Y-%m-%d %h')
        = DATE_FORMAT(NOW(), '%Y-%m-%d 09');




SELECT AIR_TIME 
	, ROUND(AVG(PM_CODE)) PM_CODE
   , PM_GRADE
   , ROUND(AVG(FPM_CODE)) FPM_CODE
   , FPM_GRADE
   , ROUND(AVG(CICI_CODE)) CICI_CODE
   , CICI_GRADE
   , ROUND(AVG(CO2_CODE)) CO2_CODE
   , ROUND(AVG(VOCS_CODE)) VOCS_CODE
FROM air_quality A INNER JOIN cici C
ON A.SERIAL_NO = C.SERIAL_NO AND AIR_TIME = CICI_TIME
WHERE A.SERIAL_NO = 'ICW0W2100562'
AND DATE_FORMAT(AIR_TIME, '%Y%m%d') = DATE_FORMAT(NOW(), '%Y%m%d');


SELECT AIR_TIME 
	, ROUND(AVG(PM_CODE)) PM_CODE
   , PM_GRADE
   , ROUND(AVG(FPM_CODE)) FPM_CODE
   , FPM_GRADE
   , ROUND(AVG(CICI_CODE)) CICI_CODE
   , CICI_GRADE
   , ROUND(AVG(CO2_CODE)) CO2_CODE
   , ROUND(AVG(VOCS_CODE)) VOCS_CODE
FROM air_quality A INNER JOIN cici C 
ON A.SERIAL_NO = C.SERIAL_NO AND AIR_TIME = CICI_TIME
WHERE A.SERIAL_NO = 'ICW0W2000951'
AND DATE_FORMAT(AIR_TIME, '%Y%m%d') = (SELECT DATE_FORMAT(MAX(AIR_TIME), '%Y%m%d') FROM air_quality WHERE SERIAL_NO = 'ICW0W2000951');


'ICW0W2000947' 'V01T1623113' 'ICW0W2000951'

SELECT * FROM air_quality
WHERE SERIAL_NO = 'ICW0W2000951'
ORDER BY AIR_TIME DESC;


SELECT 
    AVG(AIR_TIME) AS AIR_TIME,
    ROUND(AVG(PM_CODE)) AS PM_CODE,
    AVG(PM_GRADE) AS PM_GRADE,
    ROUND(AVG(FPM_CODE)) AS FPM_CODE,
    AVG(FPM_GRADE) AS FPM_GRADE,
    ROUND(AVG(CICI_CODE)) AS CICI_CODE,
    AVG(CICI_GRADE) AS CICI_GRADE,
    ROUND(AVG(CO2_CODE)) AS CO2_CODE,
    ROUND(AVG(VOCS_CODE)) AS VOCS_CODE
FROM 
    (SELECT 
        A.AIR_TIME,
        A.PM_CODE,
        A.PM_GRADE,
        A.FPM_CODE,
        A.FPM_GRADE,
        C.CICI_CODE,
        C.CICI_GRADE,
        A.CO2_CODE,
        A.VOCS_CODE
    FROM 
        air_quality A 
    INNER JOIN 
        cici C ON A.SERIAL_NO = C.SERIAL_NO AND A.AIR_TIME = C.CICI_TIME
    WHERE 
        A.SERIAL_NO = 'ICW0W2100562'
    AND 
        MONTH(A.AIR_TIME) = MONTH(NOW())
    AND 
        YEAR(A.AIR_TIME) = YEAR(NOW())) AS recent_data;
        
        
SELECT DATA_CODE
		, DATE_TIME
		, TEMPERATURE
		, HUMIDITY
		, SERIAL_NO
FROM temandhum
WHERE SERIAL_NO = 'V01T1623130';


SELECT * FROM temandhum
WHERE SERIAL_NO = 'ICW0W2100491'
AND DATE_TIME = (SELECT MAX(DATE_TIME) FROM temandhum);



SELECT AIR_TIME
        , ROUND(AVG(PM_CODE)) PM_CODE
        , PM_GRADE
        , ROUND(AVG(FPM_CODE)) FPM_CODE
        , FPM_GRADE
        , ROUND(AVG(CICI_CODE)) CICI_CODE
        , CICI_GRADE
        , ROUND(AVG(CO2_CODE)) CO2_CODE
        , ROUND(AVG(VOCS_CODE)) VOCS_CODE
        FROM air_quality A INNER JOIN cici C
        ON A.SERIAL_NO = C.SERIAL_NO AND AIR_TIME = CICI_TIME
        WHERE A.SERIAL_NO = 'ICW0W2000947'
        AND DATE_FORMAT(AIR_TIME, '%Y%m%d') =
        (
        SELECT DATE_FORMAT(MAX(AIR_TIME), '%Y%m%d')
        FROM air_quality WHERE SERIAL_NO = 'ICW0W2000947'
        );


SELECT * FROM map;-- 87     1 2 3 4 5
SELECT COUNT(*) FROM map;


DELETE FROM map
WHERE serial_no NOT IN (SELECT DISTINCT serial_no FROM air_quality); -- 1 2 3


SELECT * FROM air_quality; -- 81

SELECT DATA_CODE
		, TEMPERATURE
		, HUMIDITY
		, DATE_TIME
		, SERIAL_NO
		, FROM TEMANDHUM
			WHERE SERIAL_NO = 'ICW0W2100562' 
			AND DATE_TIME = (
			SELECT MAX(DATE_TIME) 
			FROM temandhum 
			WHERE SERIAL_NO = 'ICW0W2100562'
			);
			
			
SELECT ROUND(AVG(CICI_CODE)) AS CICI_CODE
   , STATION_NAME
   , C.SERIAL_NO
FROM CICI C
INNER JOIN MAP M
ON C.SERIAL_NO = M.SERIAL_NO
WHERE DATE_FORMAT(CICI_TIME, '%Y%m') = DATE_FORMAT(NOW(), '%Y%m')
AND STATION_NO = 'ICW0W2000983';



SELECT CICI_CODE
		, STATION_NAME
		, CICI_TIME
FROM cici C
INNER JOIN MAP M
ON C.SERIAL_NO = M.SERIAL_NO
WHERE DATE_FORMAT(CICI_TIME, '%Y%m') = DATE_FORMAT(NOW(), '%Y%m')
ORDER BY CICI_TIME DESC;



SELECT AVG(CICI_CODE) CICI_CODE
FROM cici
WHERE SERIAL_NO = 'V01T1623118'
AND DATE_FORMAT(CICI_TIME, '%Y%m') = DATE_FORMAT(NOW(), '%Y%m')
GROUP BY SERIAL_NO
ORDER BY CICI_TIME DESC;


'ICW0W2000991'
'ICW0W2000262'

-- 적용할 쿼리
-- 왜 중복된 데이터가 안걸러지냐

SELECT ROUND(AVG(CICI_CODE)) AS CC
   , STATION_NAME
   , C.SERIAL_NO
FROM CICI C
INNER JOIN MAP M
ON C.SERIAL_NO = M.SERIAL_NO
WHERE DATE_FORMAT(CICI_TIME, '%Y%m') = DATE_FORMAT(NOW(), '%Y%m')
GROUP BY STATION_NAME
ORDER BY CC DESC LIMIT 5;


-- 1 (중복 확인해보기)
SELECT CICI_NO
		, CICI_CODE
		, CICI_TIME
FROM cici
WHERE SERIAL_NO = 'ICW0W2000287';

-- 2 (평균 TOP 5)
SELECT AVG(CICI_CODE) AS CICI_CODE
   , STATION_NAME
   , C.SERIAL_NO
FROM cici C
INNER JOIN MAP M
ON C.SERIAL_NO = M.SERIAL_NO
WHERE DATE_FORMAT(CICI_TIME, '%Y%m') = DATE_FORMAT(NOW(), '%Y%m')
GROUP BY STATION_NAME
ORDER BY AVG(CICI_CODE) DESC LIMIT 30;



SELECT COUNT(*) FROM MAP

















